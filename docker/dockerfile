FROM php:7.3-apache
LABEL maintainer "Mark N Carpenter Jr <mcarpenter@smtcorp.com>"

ARG current_branch=master
ARG repository_url="https://github.com/salesagility/SuiteCRM.git"

# Set our Envrionment Variables.
# TODO: Create a ENV and/or ARG for using a local DB in the image or a
# Docker Container.

# So, defaults for the install environment will get set here.
# ENVs passed in through compose override these.
# Fallback Defaults, "like last chance or this breaks", are specified in
# config_si.php
ENV ALLOW_EMPTY_PASSWORD="yes" \
    APACHE_HTTPS_PORT_NUMBER="443" \
    APACHE_HTTP_PORT_NUMBER="80" \
    # ---------- Database ENVs ----------
    DATABASE_HOST_NAME="mariadb" \
    DATABASE_TYPE='mysql' \
    # DATABASE_PORT_NUMBER="3306" \
    DATABASE_ROOT_USERNAME="root" \
    DATABASE_ROOT_PASSWORD="suitesqladmin" \
    # See below, ENV's aren't working for some reason.
    # DATABASE_ROOT_PASSWORD="${SUITE_MYSQL_PASSWORD}" \
    DATABASE_NAME='suitecrm' \
    DATABASE_CREATE_NEW='true' \
    DATABASE_USR_DATA='create' \
    DATABASE_DROP_TABLES='1' \
    DATABASE_DEMO_DATA='true' \
    DATABASE_USER_PRIVILEDGED='true' \
    # DATABASE_CLIENT_CREATE_DATABASE_USER="suitedb" \
    # DATABASE_CLIENT_CREATE_DATABASE_PASSWORD="suitesql" \
    # DATABASE_CLIENT_CREATE_DATABASE_NAME="suitecrm" \
    # DATABASE_CLIENT_CREATE_DATABASE_PRIVILEGES="ALL" \
    # ---------- Suite ENVs ----------
    # DB; name, user, password should match above
    # SUITECRM_DATABASE_USER="suitedb" \
    # SUITECRM_DATABASE_PASSWORD="suitesql" \
    # SUITECRM_DATABASE_NAME="suitecrm" \
    # SUITECRM_HOST="127.0.0.1" \
    # SUITECRM_HTTP_TIMEOUT="3600" \
    # SUITECRM_USERNAME="user" \
    # SUITECRM_PASSWORD="password" \
    # SUITECRM_EMAIL="user@example.com" \
    # SUITECRM_LAST_NAME="Name" \
    # SUITECRM_SMTP_HOST="" \
    # SUITECRM_SMTP_PASSWORD="" \
    # SUITECRM_SMTP_PORT="" \
    # SUITECRM_SMTP_PROTOCOL="" \
    # SUITECRM_SMTP_USER="" \
    # SUITECRM_VALIDATE_USER_IP="yes" \
    SITE_ADMIN_USER="user" \
    SITE_ADMIN_PASSWORD="password" \
    SITE_URL="http://10.27.1.130:8580"\
    SITE_SYSTEM_NAME='SuiteCRM Docker Build' \
    CURRENT_BRANCH=$current_branch

# Get our dependancies
RUN apt update && apt upgrade -y && apt install --no-install-recommends -y \
    libxml2-dev \
    zlib1g-dev \
    libzip-dev \
    libcurl4-gnutls-dev \
    libjpeg-dev \
    libpng-dev \
    libc-client-dev \
    libkrb5-dev \
    git \
    curl \
    wget \
    ca-certificates \
    xz-utils \
    openssl \
  # mod_ssl \
    && docker-php-ext-install -j$(nproc) dom \
    && docker-php-ext-install -j$(nproc) intl \
    && docker-php-ext-install -j$(nproc) zip \
    && docker-php-ext-install -j$(nproc) curl \
    && docker-php-ext-install -j$(nproc) gd \
    && docker-php-ext-install -j$(nproc) mysqli \
    && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \
    && docker-php-ext-install -j$(nproc) imap \
    && docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd \
    && docker-php-ext-install -j$(nproc) pdo_mysql \
    # && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
    # && docker-php-ext-install -j$(nproc) gd \
    && rm -r /var/lib/apt/lists/* \
    # Generate Self Signed SSL
    && openssl genrsa -des3 -passout pass:dockerself -out server.pass.key 2048 \
    && openssl rsa -passin pass:dockerself -in server.pass.key -out server.key \
    && rm server.pass.key \
    && openssl req -new -key server.key -out server.csr \
        -subj "/C=US/ST=Connecticut/L=Newtown/O=Sample Corp/OU=Software Department/CN=sample.com" \
    && openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt \
  # Configure XDEBUG
    && git clone https://github.com/xdebug/xdebug.git \
    && cd xdebug \
    && ./rebuild.sh \
    # Grab Suite from the master branch of our repository.
    && git clone -b ${current_branch} ${repository_url} /suitecrm \
    # Create the missing cache dirs.
    && mkdir /suitecrm/cache/ \
    && mkdir /suitecrm/cache/images \
    && mkdir /suitecrm/cache/layout \
    && mkdir /suitecrm/cache/pdf \
    && mkdir /suitecrm/cache/xml \
    && mkdir /suitecrm/cache/include \
    && mkdir /suitecrm/cache/include/javascript \
    # Install Composer, we might consider adding any other Suite install Deps here
    # Composer should cover them all though.
    && php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" \
    && php composer-setup.php && php -r "unlink('composer-setup.php');" \
    && php composer.phar install --no-plugins --no-scripts --working-dir=/suitecrm \
    && php composer.phar update --no-plugins --no-scripts --working-dir=/suitecrm 

# Create and Configure Apache Vhosts
# HTTP
COPY suite-vhost.conf /etc/apache2/sites-available/suite-vhost.conf
# HTTPS
# COPY /suitecrm/docker/suite-https-vhost.conf /etc/apache2/sites-available/suite-https-vhost.conf
# COPY certs/cert.pem /opt/suitecrm/apache/conf/certs/cert.pem
# COPY certs/key.pem /opt/suitecrm/apache/conf/certs/key.pem
# Add our php.ini configuration.
COPY suite-php.ini /usr/local/etc/php/conf.d/suite-php.ini
# Enable a php.ini to override, and Enable Sites
RUN cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini \
    && a2ensite suite-vhost.conf \
    && a2ensite suite-https-vhost.conf \
    && a2enmod ssl \
    && service apache2 restart
# Add our configuration(s)
# COPY config_bn.php /suitecrm/config_si.php
COPY config_si.php /suitecrm/config_si.php
# COPY config.php /suitecrm/config_si.php

RUN chown -R www-data:www-data /suitecrm \
    && chmod -R 755 /suitecrm \
    && cd /suitecrm \
    # ADD config_override.php below if in use.
    && chmod -R 775 cache custom modules themes data upload

# Start the SILENT install of SuiteCRM
RUN cd /suitecrm \
    && php -r "\$_SERVER['HTTP_HOST'] = 'localhost'; \$_SERVER['REQUEST_URI'] = 'install.php';\$_REQUEST = array('goto' => 'SilentInstall', 'cli' => 'true');require_once 'install.php';";

# Expose our appications ports
EXPOSE 80 443 9000